ds_bl[,rowIndex:=.I] # add rowindex for later merging
# STEP (2):Aggregation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# STEP 2: Classification~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
registerDoMC(8);
ptm<- proc.time();
dimS <- dim(ds_eeg)
dimL <- str_split(h5readAttributes(f2load,"/")$dim_label,"_") %>% unlist()
timeIDX <- 1:dimS[str_detect(dimL,"time")]
elecIDX <- 1:dimS[str_detect(dimL,"chan")]
if (any(dimL=="freq")){freqIDX <- 1:dimS[str_detect(dimL,"freq")]}
#sprintf("Classification starts!! Retained data are:")
sprintf(paste0(dimL,"= %d"),dimS)
results<-
foreach(t=timeIDX) %dopar% {
#Get data of one point!
if (eegV=="eegraw"){d<-ds_eeg[,t,elecIDX]} # index by dim?
if (eegV=="eegpower"){d<-ds_eeg[,t,freqIDX,elecIDX];}
dim(d)<-c(dim(d)[1],prod(dim(d)[2:3],na.rm=T))#adjust dimensions !
#Assigne label
C <- ds_bl[[modelV]];if(grepl("nppr",sessN)){C<-sample(C)}
d<-data.table(C=C,data.table(d));#make sure to data.table(d) before appending!
setnames(d,"C",modelV)
#Run classification
m<-train(formula, data=d, method=method, metric=metric, trControl=control);
# #Get all results
r <- summary_decode(m,varL,list(PRED=T,CM=saveCM,IMP=saveIMP,ROC=saveROC))
r <- r[sapply(r, function(x) dim(x)[1]) > 0];# remove empty slots
r_f <- lapply(r, cbind,SUBID=subN,time=timeIDX[t])# don't lapply r_f repeatedly
r_f$r_prob <- r_f$r_prob %>% mutate(BLOCK=ds_bl$BLOCK,TRIAL=ds_bl$TRIAL) # should be safe!
return(r_f)
}
proc.time() - ptm
# Summarize all results
rALL<-as.list(as.data.frame(do.call(rbind, results)))
# Result 1:Overall accuracy
r_accG<-rbindlist(rALL$r_acc);
if (saveACC){saveRDS(r_accG,paste0(s,"_",modelV,"_",sessN,"_accG.rds"))}
# Result 2:Single-trial accuracy and confidence
# Both acc and prob would be 0~1 since its cross-validated!
r_pred<-rbindlist(rALL$r_prob) %>% dplyr::select(-rowIndex);
if (savePRED){saveRDS(r_pred,paste0(s,"_",modelV,"_",sessN,"_pred.rds"))}
# Result 3:Confusion matrix
r_cm<-rbindlist(rALL$r_cm)
if (saveCM){saveRDS(r_cm,paste0(s,"_",modelV,"_",sessN,"_cm.rds"))}
# Result 4:Importance map
r_imp<-rbindlist(rALL$r_imp)
if (saveIMP){saveRDS(r_imp,paste0(s,"_",modelV,"_",sessN,"_cm.rds"))}
# STEP 3: Quickly plotting?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Plot related setting (for quick check!)
theme_set(theme_bw(base_size = 20))#32/28
CSCALE_YlOrRd = rev(brewer.pal(9,"YlOrRd"));
chance<-1/length(unique(ds_bl[[modelV]]))
# Overall Accuracy
quartz(width=7.5,height=4.5);theme_set(theme_bw(base_size = 20))#32/28
print(ggplot(data=r_accG,aes(x=time,y=Accuracy,ymin=Accuracy-AccuracySD,ymax=Accuracy+AccuracySD)) +
geom_vline(xintercept=51,linetype=1,size=1)+annotate("text",x=150, y=chance-0.05,label="Stimulus + Cue")+
geom_hline(yintercept=chance,linetype=1,size=1)+
geom_ribbon(alpha=0.2,linetype=0,fill="red")+#
ggtitle(s)+
geom_line(size=1.5,color="red"))
}
# Send email to me
# notifyM(paste0("HAL2017_",date()))
300/4
print(ggplot(data=r_accG,aes(x=time,y=Accuracy,ymin=Accuracy-AccuracySD,ymax=Accuracy+AccuracySD)) +
geom_vline(xintercept=75,linetype=1,size=1)+annotate("text",x=150, y=chance-0.05,label="Stimulus + Cue")+
geom_hline(yintercept=chance,linetype=1,size=1)+
geom_ribbon(alpha=0.2,linetype=0,fill="red")+#
ggtitle(s)+
geom_line(size=1.5,color="red"))
600/3
600/4
print(ggplot(data=r_accG,aes(x=time,y=Accuracy,ymin=Accuracy-AccuracySD,ymax=Accuracy+AccuracySD)) +
geom_vline(xintercept=c(75,150),linetype=1,size=1)+annotate("text",x=150, y=chance-0.05,label="Stimulus + Cue")+
geom_hline(yintercept=chance,linetype=1,size=1)+
geom_ribbon(alpha=0.2,linetype=0,fill="red")+#
ggtitle(s)+
geom_line(size=1.5,color="red"))
# HAL2017_PUSHMORE_Decode
# peforms basic time-series decoding
# NOTE:
# -use TEST phase data for decoding (HAL2017_READOUT_TEST_BehP.txt)
# -EV_RESP(RT) contains complete omission
# =============================================================
#Removing evrything from workspace
graphics.off()
rm(list = ls(all = TRUE))
#Setting up directory
fsep<-.Platform$file.sep;
Dir_R<-path.expand("~/Dropbox/w_ONGOINGRFILES/w_OTHERS")
Dir_EDATA<-path.expand("~/Dropbox/w_SCRIPTS/P.HAL2017/HAL2017_PUSH/DataAnalysis/Matlab/EEG")
Dir_BDATA<-path.expand("~/Dropbox/w_SCRIPTS/P.HAL2017/HAL2017_PUSH/DataAnalysis/Matlab/BEH/w_ALLGRAND")
Dir_GRAND<-paste0(Dir_EDATA,"/w_ALLGRAND")
# Load libraries
library(data.table)
library(tidyverse)
library(broom)
library(rhdf5)
library(caret)
library(foreach)
library(doMC)
library(binhf)
library(pROC)
library(RColorBrewer)
library(scales)
library(forcats)
library(stringr)
# Source Files
setwd(Dir_R)
source('basic_theme.R')
source('basic_lib.R')
#Load behavioral data
setwd(Dir_BDATA)
ds_b<-fread("HAL2017_PUSHMORE_BehP.txt")
ds_b[is.nanM(ds_b)]<-NA;
#Analysis Setting
setwd(Dir_EDATA)
subs<-list.files( pattern="^A[[:digit:]]{3}");
eegV<-"eegpower" #eegraw
modelV<-"PTSRCONJ"
sessN<-"nbG1";#nb = regular decoding, nppr = shuffled label
balanceV<-NA
cutV=NA;# 1288 for HAL2017_BI
saveACC<-F;
savePRED<-T;
saveCM<-F;
saveIMP<-F;
saveROC<-F;
# Classification Setting
#"lda" = linear discriminant analysis
#"knn" = k nearest means
#"svmRadial" = support vector machine
#"nb" = naive bayes
#"rf" = random forest
#"svmLinear3" = L2 Regularized Support Vector Machine (dual) with Linear Kernel
#"pda" = penalized linear discriminant analysis
method<-'pda';
formula<-as.formula(paste(modelV,' ~ .'))
metric<-"Accuracy";
control<-trainControl(method="repeatedcv",
number=5,repeats=10,
selectionFunction = "oneSE",
sampling = "down",# rose,smote,down,up: how to balance # of observations for labels
classProbs=TRUE,allowParallel=TRUE,savePredictions=TRUE)
#Feature labels
freqL=c("Delta","Theta","Alpha","Beta","Gamma");
elecL<-fread(paste0(Dir_R,fsep,"chanlocs_20E_Oregon.txt"))
varL = expand.grid(elec = as.vector(elecL$Elec),freq = freqL)
varL = str_c(varL$freq,"_",varL$elec)
s<-subs[1]
# IN THE LOOP FOR SUBJECT!!
for (s in subs[subs%in% c("A101","A102","A200","A201","A202","A300","A301","A302")]){#subs[subs%in% c("A118")] # something is off for
# STEP 1: Merging data~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load EEG data via HDF5 file
Dir_Data_i<-paste0(Dir_EDATA,fsep,s,fsep,"DATASETS")
setwd(Dir_Data_i);H5close();
f2load<-list.files(path=Dir_Data_i,pattern='*FFB_STIMLK.h5',full.names=TRUE)
#f2load<-list.files(path=Dir_Data_i,pattern='*FFB_RESPLK.h5',full.names=TRUE)
#f2load<-list.files(path=Dir_Data_i,pattern='*FFB_GOLK.h5',full.names=TRUE)
ds_eeg<-h5read(f2load,eegV);#ds_info<-h5ls(f2load);
btIDX<-data.table(h5read(f2load ,"IDX"))%>%dplyr::rename(BLOCK=V1,TRIAL=V2);
# Get Individual data to match to EEG data (this will reflect EEG artifact rejection)
# ds_bl is typically smaller than original ds_b because btIDX reflects AR...
subN<-as.numeric(gsub("A","",s));# Filter data and keep indexes
ds_bl<-merge(btIDX,ds_b[SUBID_S==subN],by=c('BLOCK','TRIAL')) # use unique ID
# Applies 1) filtering, 2) cutting, 3) balancing, and 4) factorization
prepSet <- list(
#filtIDX =! is.na(ds_bl[[modelV]]) & ds_bl$ACC==1 & ds_bl$LACC==1 & ds_bl$TRIAL>1,
filtIDX =! is.na(ds_bl[[modelV]]) & ds_bl$ACC==1 & ds_bl$LACC==1 & ds_bl$TRIAL>1 & ds_bl$PTSRGROUP==1,
modelV = modelV, balanceV = balanceV, cutV = cutV)
g(ds_bl, ds_eeg) %=% preprop_decode(ds_bl,ds_eeg,prepSet)
ds_bl[,rowIndex:=.I] # add rowindex for later merging
# STEP (2):Aggregation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# STEP 2: Classification~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
registerDoMC(8);
ptm<- proc.time();
dimS <- dim(ds_eeg)
dimL <- str_split(h5readAttributes(f2load,"/")$dim_label,"_") %>% unlist()
timeIDX <- 1:dimS[str_detect(dimL,"time")]
elecIDX <- 1:dimS[str_detect(dimL,"chan")]
if (any(dimL=="freq")){freqIDX <- 1:dimS[str_detect(dimL,"freq")]}
#sprintf("Classification starts!! Retained data are:")
sprintf(paste0(dimL,"= %d"),dimS)
results<-
foreach(t=timeIDX) %dopar% {
#Get data of one point!
if (eegV=="eegraw"){d<-ds_eeg[,t,elecIDX]} # index by dim?
if (eegV=="eegpower"){d<-ds_eeg[,t,freqIDX,elecIDX];}
dim(d)<-c(dim(d)[1],prod(dim(d)[2:3],na.rm=T))#adjust dimensions !
#Assigne label
C <- ds_bl[[modelV]];if(grepl("nppr",sessN)){C<-sample(C)}
d<-data.table(C=C,data.table(d));#make sure to data.table(d) before appending!
setnames(d,"C",modelV)
#Run classification
m<-train(formula, data=d, method=method, metric=metric, trControl=control);
# #Get all results
r <- summary_decode(m,varL,list(PRED=T,CM=saveCM,IMP=saveIMP,ROC=saveROC))
r <- r[sapply(r, function(x) dim(x)[1]) > 0];# remove empty slots
r_f <- lapply(r, cbind,SUBID=subN,time=timeIDX[t])# don't lapply r_f repeatedly
r_f$r_prob <- r_f$r_prob %>% mutate(BLOCK=ds_bl$BLOCK,TRIAL=ds_bl$TRIAL) # should be safe!
return(r_f)
}
proc.time() - ptm
# Summarize all results
rALL<-as.list(as.data.frame(do.call(rbind, results)))
# Result 1:Overall accuracy
r_accG<-rbindlist(rALL$r_acc);
if (saveACC){saveRDS(r_accG,paste0(s,"_",modelV,"_",sessN,"_accG.rds"))}
# Result 2:Single-trial accuracy and confidence
# Both acc and prob would be 0~1 since its cross-validated!
r_pred<-rbindlist(rALL$r_prob) %>% dplyr::select(-rowIndex);
if (savePRED){saveRDS(r_pred,paste0(s,"_",modelV,"_",sessN,"_pred.rds"))}
# Result 3:Confusion matrix
r_cm<-rbindlist(rALL$r_cm)
if (saveCM){saveRDS(r_cm,paste0(s,"_",modelV,"_",sessN,"_cm.rds"))}
# Result 4:Importance map
r_imp<-rbindlist(rALL$r_imp)
if (saveIMP){saveRDS(r_imp,paste0(s,"_",modelV,"_",sessN,"_cm.rds"))}
# STEP 3: Quickly plotting?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Plot related setting (for quick check!)
theme_set(theme_bw(base_size = 20))#32/28
CSCALE_YlOrRd = rev(brewer.pal(9,"YlOrRd"));
chance<-1/length(unique(ds_bl[[modelV]]))
# Overall Accuracy
quartz(width=7.5,height=4.5);theme_set(theme_bw(base_size = 20))#32/28
print(ggplot(data=r_accG,aes(x=time,y=Accuracy,ymin=Accuracy-AccuracySD,ymax=Accuracy+AccuracySD)) +
geom_vline(xintercept=c(75,150),linetype=1,size=1)+annotate("text",x=150, y=chance-0.05,label="Stimulus + Cue")+
geom_hline(yintercept=chance,linetype=1,size=1)+
geom_ribbon(alpha=0.2,linetype=0,fill="red")+#
ggtitle(s)+
geom_line(size=1.5,color="red"))
}
# Send email to me
# notifyM(paste0("HAL2017_",date()))
# HAL2017_PUSHMORE_Decode
# peforms basic time-series decoding
# NOTE:
# -use TEST phase data for decoding (HAL2017_READOUT_TEST_BehP.txt)
# -EV_RESP(RT) contains complete omission
# =============================================================
#Removing evrything from workspace
graphics.off()
rm(list = ls(all = TRUE))
#Setting up directory
fsep<-.Platform$file.sep;
Dir_R<-path.expand("~/Dropbox/w_ONGOINGRFILES/w_OTHERS")
Dir_EDATA<-path.expand("~/Dropbox/w_SCRIPTS/P.HAL2017/HAL2017_PUSH/DataAnalysis/Matlab/EEG")
Dir_BDATA<-path.expand("~/Dropbox/w_SCRIPTS/P.HAL2017/HAL2017_PUSH/DataAnalysis/Matlab/BEH/w_ALLGRAND")
Dir_GRAND<-paste0(Dir_EDATA,"/w_ALLGRAND")
# Load libraries
library(data.table)
library(tidyverse)
library(broom)
library(rhdf5)
library(caret)
library(foreach)
library(doMC)
library(binhf)
library(pROC)
library(RColorBrewer)
library(scales)
library(forcats)
library(stringr)
# Source Files
setwd(Dir_R)
source('basic_theme.R')
source('basic_lib.R')
#Load behavioral data
setwd(Dir_BDATA)
ds_b<-fread("HAL2017_PUSHMORE_BehP.txt")
ds_b[is.nanM(ds_b)]<-NA;
#Analysis Setting
setwd(Dir_EDATA)
subs<-list.files( pattern="^A[[:digit:]]{3}");
eegV<-"eegpower" #eegraw
modelV<-"PTSRCONJ"
sessN<-"nbG2";#nb = regular decoding, nppr = shuffled label
balanceV<-NA
cutV=NA;# 1288 for HAL2017_BI
saveACC<-F;
savePRED<-T;
saveCM<-F;
saveIMP<-F;
saveROC<-F;
# Classification Setting
#"lda" = linear discriminant analysis
#"knn" = k nearest means
#"svmRadial" = support vector machine
#"nb" = naive bayes
#"rf" = random forest
#"svmLinear3" = L2 Regularized Support Vector Machine (dual) with Linear Kernel
#"pda" = penalized linear discriminant analysis
method<-'pda';
formula<-as.formula(paste(modelV,' ~ .'))
metric<-"Accuracy";
control<-trainControl(method="repeatedcv",
number=5,repeats=10,
selectionFunction = "oneSE",
sampling = "down",# rose,smote,down,up: how to balance # of observations for labels
classProbs=TRUE,allowParallel=TRUE,savePredictions=TRUE)
#Feature labels
freqL=c("Delta","Theta","Alpha","Beta","Gamma");
elecL<-fread(paste0(Dir_R,fsep,"chanlocs_20E_Oregon.txt"))
varL = expand.grid(elec = as.vector(elecL$Elec),freq = freqL)
varL = str_c(varL$freq,"_",varL$elec)
s<-subs[1]
# IN THE LOOP FOR SUBJECT!!
for (s in subs[subs%in% c("A101","A102","A200","A201","A202","A300","A301","A302")]){#subs[subs%in% c("A118")] # something is off for
# STEP 1: Merging data~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load EEG data via HDF5 file
Dir_Data_i<-paste0(Dir_EDATA,fsep,s,fsep,"DATASETS")
setwd(Dir_Data_i);H5close();
f2load<-list.files(path=Dir_Data_i,pattern='*FFB_STIMLK.h5',full.names=TRUE)
#f2load<-list.files(path=Dir_Data_i,pattern='*FFB_RESPLK.h5',full.names=TRUE)
#f2load<-list.files(path=Dir_Data_i,pattern='*FFB_GOLK.h5',full.names=TRUE)
ds_eeg<-h5read(f2load,eegV);#ds_info<-h5ls(f2load);
btIDX<-data.table(h5read(f2load ,"IDX"))%>%dplyr::rename(BLOCK=V1,TRIAL=V2);
# Get Individual data to match to EEG data (this will reflect EEG artifact rejection)
# ds_bl is typically smaller than original ds_b because btIDX reflects AR...
subN<-as.numeric(gsub("A","",s));# Filter data and keep indexes
ds_bl<-merge(btIDX,ds_b[SUBID_S==subN],by=c('BLOCK','TRIAL')) # use unique ID
# Applies 1) filtering, 2) cutting, 3) balancing, and 4) factorization
prepSet <- list(
#filtIDX =! is.na(ds_bl[[modelV]]) & ds_bl$ACC==1 & ds_bl$LACC==1 & ds_bl$TRIAL>1,
filtIDX =! is.na(ds_bl[[modelV]]) & ds_bl$ACC==1 & ds_bl$LACC==1 & ds_bl$TRIAL>1 & ds_bl$PTSRGROUP==2,
modelV = modelV, balanceV = balanceV, cutV = cutV)
g(ds_bl, ds_eeg) %=% preprop_decode(ds_bl,ds_eeg,prepSet)
ds_bl[,rowIndex:=.I] # add rowindex for later merging
# STEP (2):Aggregation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# STEP 2: Classification~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
registerDoMC(8);
ptm<- proc.time();
dimS <- dim(ds_eeg)
dimL <- str_split(h5readAttributes(f2load,"/")$dim_label,"_") %>% unlist()
timeIDX <- 1:dimS[str_detect(dimL,"time")]
elecIDX <- 1:dimS[str_detect(dimL,"chan")]
if (any(dimL=="freq")){freqIDX <- 1:dimS[str_detect(dimL,"freq")]}
#sprintf("Classification starts!! Retained data are:")
sprintf(paste0(dimL,"= %d"),dimS)
results<-
foreach(t=timeIDX) %dopar% {
#Get data of one point!
if (eegV=="eegraw"){d<-ds_eeg[,t,elecIDX]} # index by dim?
if (eegV=="eegpower"){d<-ds_eeg[,t,freqIDX,elecIDX];}
dim(d)<-c(dim(d)[1],prod(dim(d)[2:3],na.rm=T))#adjust dimensions !
#Assigne label
C <- ds_bl[[modelV]];if(grepl("nppr",sessN)){C<-sample(C)}
d<-data.table(C=C,data.table(d));#make sure to data.table(d) before appending!
setnames(d,"C",modelV)
#Run classification
m<-train(formula, data=d, method=method, metric=metric, trControl=control);
# #Get all results
r <- summary_decode(m,varL,list(PRED=T,CM=saveCM,IMP=saveIMP,ROC=saveROC))
r <- r[sapply(r, function(x) dim(x)[1]) > 0];# remove empty slots
r_f <- lapply(r, cbind,SUBID=subN,time=timeIDX[t])# don't lapply r_f repeatedly
r_f$r_prob <- r_f$r_prob %>% mutate(BLOCK=ds_bl$BLOCK,TRIAL=ds_bl$TRIAL) # should be safe!
return(r_f)
}
proc.time() - ptm
# Summarize all results
rALL<-as.list(as.data.frame(do.call(rbind, results)))
# Result 1:Overall accuracy
r_accG<-rbindlist(rALL$r_acc);
if (saveACC){saveRDS(r_accG,paste0(s,"_",modelV,"_",sessN,"_accG.rds"))}
# Result 2:Single-trial accuracy and confidence
# Both acc and prob would be 0~1 since its cross-validated!
r_pred<-rbindlist(rALL$r_prob) %>% dplyr::select(-rowIndex);
if (savePRED){saveRDS(r_pred,paste0(s,"_",modelV,"_",sessN,"_pred.rds"))}
# Result 3:Confusion matrix
r_cm<-rbindlist(rALL$r_cm)
if (saveCM){saveRDS(r_cm,paste0(s,"_",modelV,"_",sessN,"_cm.rds"))}
# Result 4:Importance map
r_imp<-rbindlist(rALL$r_imp)
if (saveIMP){saveRDS(r_imp,paste0(s,"_",modelV,"_",sessN,"_cm.rds"))}
# STEP 3: Quickly plotting?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Plot related setting (for quick check!)
theme_set(theme_bw(base_size = 20))#32/28
CSCALE_YlOrRd = rev(brewer.pal(9,"YlOrRd"));
chance<-1/length(unique(ds_bl[[modelV]]))
# Overall Accuracy
quartz(width=7.5,height=4.5);theme_set(theme_bw(base_size = 20))#32/28
print(ggplot(data=r_accG,aes(x=time,y=Accuracy,ymin=Accuracy-AccuracySD,ymax=Accuracy+AccuracySD)) +
geom_vline(xintercept=c(75,150),linetype=1,size=1)+annotate("text",x=150, y=chance-0.05,label="Stimulus + Cue")+
geom_hline(yintercept=chance,linetype=1,size=1)+
geom_ribbon(alpha=0.2,linetype=0,fill="red")+#
ggtitle(s)+
geom_line(size=1.5,color="red"))
}
# Send email to me
# notifyM(paste0("HAL2017_",date()))
# OrderYourMind_fMRI
# =============================================================
#Removing evrything from workspace
graphics.off()
rm(list = ls(all = TRUE))
# Load libraries
library(data.table)
library(foreign)
library(dplyr)
library(tidyr)
library(gridExtra)
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gee)
library(broom)
library(effects)
library(GGally)
library(psych)
library(stargazer)
library(afex)
library(lme4)
#Setting up directory (e.g., directories for AK)
fsep<-.Platform$file.sep;
Dir_R<-path.expand("~/Dropbox/w_ONGOINGRFILES/w_OTHERS")
# OrderYourMind_fMRI
# =============================================================
#Removing evrything from workspace
graphics.off()
rm(list = ls(all = TRUE))
# Load libraries
library(data.table)
library(foreign)
library(dplyr)
library(tidyr)
library(gridExtra)
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gee)
library(broom)
library(effects)
library(GGally)
library(psych)
library(stargazer)
library(afex)
library(lme4)
#Setting up directory (e.g., directories for AK)
fsep<-.Platform$file.sep;
Dir_R<-path.expand("~/Dropbox/w_ONGOINGRFILES/w_OTHERS")
Dir_BDATA<-path.expand("~/Dropbox/sharedprojects/P.SEQ_fMRI/DataAnalysis/MATLAB/BEH\(SS2_MRI\)/w_ALLGRAND")
# Source Files
setwd(Dir_R)
source('basic_theme.R')
source('basic_libS.R')
# source('anovakun_480.txt')
#======================================================================================================
# # Load data
#======================================================================================================
# READING FILES
setwd(Dir_BDATA)#Change directory
ds<-fread('OrderYourMind_fMRI_BehP.txt', header=TRUE, fill=TRUE)
ds<-fread('OrderYourMind_fMRI_BEHP.txt', header=TRUE, fill=TRUE)
# READING FILES
setwd(Dir_BDATA)#Change directory
# OrderYourMind_fMRI
# =============================================================
#Removing evrything from workspace
graphics.off()
rm(list = ls(all = TRUE))
# Load libraries
library(data.table)
library(foreign)
library(dplyr)
library(tidyr)
library(gridExtra)
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gee)
library(broom)
library(effects)
library(GGally)
library(psych)
library(stargazer)
library(afex)
library(lme4)
#Setting up directory (e.g., directories for AK)
fsep<-.Platform$file.sep;
Dir_R<-path.expand("~/Dropbox/w_ONGOINGRFILES/w_OTHERS")
Dir_BDATA<-path.expand("~/Dropbox/sharedprojects/P.SEQ_fMRI/DataAnalysis/MATLAB/BEH_S2MRI/w_ALLGRAND")
# Source Files
setwd(Dir_R)
source('basic_theme.R')
source('basic_libS.R')
# source('anovakun_480.txt')
#======================================================================================================
# # Load data
#======================================================================================================
# READING FILES
setwd(Dir_BDATA)#Change directory
ds<-fread('OrderYourMind_fMRI_BEHP.txt', header=TRUE, fill=TRUE)
ds
# Add variables
ds[is.nanM(ds)]<-NA;
ds$RTlog<-log(ds$RT);
ds[,ACPOS:=if_else(BSPOS<=3,1,2)]
ds[,SESSION:=if_else(SUBID>=200,"fMRI","Prep")]
ds[SUBID>=200,SUBID:=SUBID-100]
date(0)
date()
